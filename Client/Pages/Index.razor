@using System.ComponentModel.DataAnnotations;
@using Casino.Shared.Models;
@using Microsoft.AspNetCore.WebUtilities;
@using Casino.Client.Services;
@using System.Text.Json;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime;
@implements IAsyncDisposable;

@page "/"

<PageTitle>Index</PageTitle>
@if (!GameStarted) {

    <h1>Welcome to casino game, helooo!</h1>
    <br /> 

    <EditForm Model="@player" OnInvalidSubmit="Connect">
        <p>Enter name:  <InputText @bind-Value="@player.Name"/></p>
    </EditForm>

    <button class="btn btn-primary" @onclick="Connect">Start game</button>
} else if (!Match) {
    <p>Hi @player.Name! Waiting for another player</p>
    <br />
    <BSSpinner Color="BSColor.Info"/>
}

@if (Match && TableCards != null && PlayerCards != null)
{
    <BSContainer>
        <BSRow Align="Align.Start" Justify="Justify.Center">
        <h1>Game against @opponent?.Name!</h1>
        <h2>@(isMyTurn ? "Your Turn" : opponent?.Name + "'s turn")</h2>
        <h3>@(isLastRound ? "LAST ROUND!" : "")</h3>
        </BSRow>
        <BSRow Align="Align.Start" Justify="Justify.Center">
            <BSCol>
            <h2>Table cards</h2>
            </BSCol>
        </BSRow>
        <BSRow Align="Align.Start" Justify="Justify.Center" PaddingBottom="Padding.ExtraLarge">
            @foreach (var c in TableCards)
            {
                <BSCol Column="2">
                    <div class="d-inline-block">
                        <BSImage Source=@GetCardPath(c.Name) Align="Align.Center" @onclick="@(()=> makeMovesDuringTurn(c, true))" border=@(c.IsSelected ? "2px solid #72d194" : "") width="100" height="200"/>
                    </div>
                </BSCol>
            }
        </BSRow>
        

        @if (showError)
        {
        <BSAlert Color=BSColor.Danger IsDismissible="true" Dismissed="@(() => Dismiss())" @key="alert">
            Illegal move!
        </BSAlert>
        }

        <!-- Alert -->
        @if (showBuild)
        {
                <BSAlert Color=BSColor.Info IsDismissible="true" Dismissed="@(() => Dismiss())" @key="alert">
                @opponent.Name took following cards:
                @foreach (var i in imagesToShow)
                {
                    <BSImage Source=@GetCardPath(i) Align="Align.Center" width="100" height="200"/>
                }
                <hr>
                With this: 
                <BSImage Source=@GetCardPath(imageToShow) Align="Align.Center" width="100" height="200"/>
                </BSAlert>
        }

        <!-- Player Cards -->
        <BSRow Justify="Justify.Center" Align="Align.Start" PaddingTop="Padding.ExtraLarge">
           <h2>Your cards</h2> 
        </BSRow>
        <br />
        <br />
        <br />
        <BSRow Align="Align.Start" Justify="Justify.Center" >
            @foreach (var c in PlayerCards)
            {
                <BSCol Column="2">
                    <div class="d-inline-block">
                        <BSImage Source=@GetCardPath(c.Name) Align="Align.Center" @onclick="@(()=> makeMovesDuringTurn(c, false))" border=@(c.IsSelected ? "2px solid #72d194" : "") width="100" height="200"/>
                    </div>
                </BSCol>
            }
        </BSRow>
        <BSRow Justify="Justify.Center" Align="Align.Start">
            <BSCol><button class="btn btn-primary" disabled=@(!isMyTurn)  @onclick="(() => FinishTurn())">Finish turn</button></BSCol>
        </BSRow>
    </BSContainer>
}

@code {
    private BSAlert? alert;
    private Player? opponent { get; set; }
    private HubConnection? hubConnection{ get; set; }
    private List<Card>? TableCards { get; set; }
    private List<Card>? PlayerCards { get; set; }
    private CardBuild? currentBuild { get; set; }
    private string? groupName { get; set; }

    private bool GameStarted { get; set; } = false;
    private bool Match { get; set; } = false;
    private bool isMyTurn = false;
    private bool showBuild = false;
    private bool isLastRound = false;
    private bool showError = false;
    private List<string>? imagesToShow = new List<string>();
    private string imageToShow = "";
    private Player player { get; set; } = new Player("");

    private async Task Connect()
    {
        GameStarted = true;
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri($"/gamehub?playername={player.Name}"))
            .WithAutomaticReconnect()
            .Build();

        // With "On" method we can register a <message> that the hub can act upon.
        // We define these <message> in the server (see GameHub.cs).

        hubConnection.On<string>("Opponent", (_opponent) => {
            opponent = new Player(_opponent);
            StateHasChanged();
        });

        hubConnection.On<string>("group", (_groupname) =>
        {
            groupName = _groupname;
        });

        hubConnection.On<CardBuild>("opponentMove", async (_build) =>
        {
            // For some reason it doesn't work to show them directly from the build-object
            imagesToShow = new List<string>();
            foreach(var c in _build.TableCards)
            {
                imagesToShow.Add(c.Name);
            }

            imageToShow = _build.PlayerCard.Name;

            if(imagesToShow.Count > 0)
            {
                showBuild = true;
            }

        });

        // Start game
        hubConnection.On<string>("14", async (start) =>
        {
            if (start == "start the game already")
            {
                Match = true;
                await GetOpponentName();
                await GetPlayerTurn();
                await ShowCards();
                StateHasChanged();
            }
        });

        hubConnection.On<bool>("PlayersTurn", (_isMyTurn) =>
        {
            isMyTurn = _isMyTurn;
            StateHasChanged();
        });

        // Deal first set of cards
        hubConnection.On<List<Card>>("SendTableCards", async (_cards) =>
        {
            if(_cards != null)
            {
                TableCards = _cards;
            }

            await GetPlayerTurn();
            startTurn();

            if (PlayerCards?.Count == 0)
            {
                await hubConnection.SendAsync("DealPlayerCards", groupName);
            }

            StateHasChanged();
        });

        hubConnection.On<List<Card>, bool>("PlayerCards", (_cards, _isLastRound) =>
        {
            if(_cards != null)
            {
                PlayerCards = _cards;
                isLastRound = _isLastRound;
            }

            startTurn();
            StateHasChanged();
        });
        await hubConnection.StartAsync();
    }

    public async Task ShowCards()
    {
        if (hubConnection != null)
        {
            await hubConnection.SendAsync("ShowTableCards", groupName);
            await hubConnection.SendAsync("DealPlayerCards", groupName);

        }
    }

    public async Task GetPlayerTurn()
    {
        if(hubConnection != null)
        {
            await hubConnection.SendAsync("SendPlayerTurn", groupName);
        }
    }

    // When player has accepted the turn and cards played
    public async Task FinishTurn()
    {
        if (currentBuild?.TableCards.Count != 0) {
            var points = countPoints();

            // Take more than one card pr turn.
            if (points % currentBuild?.PlayerCard.Number != 0 || points == -1)
            {
                // Show alert
                showError = true;

                // Clear CardBuild
                startTurn();
                StateHasChanged();
                return;
            }
        }

        if (hubConnection != null)
        {
            PlayerCards?.Remove(currentBuild.PlayerCard);

            await LogMe(currentBuild.TableCards.Count.ToString());
            await hubConnection.SendAsync("TakeTurn", JsonSerializer.Serialize(currentBuild), groupName);
        }
        deselectAllCards();
        StateHasChanged();
    }

    // Request server for name of opponent
    public async Task GetOpponentName()
    {
        if (hubConnection != null)
        {
            await hubConnection.SendAsync("AnnounceOpponent", player.Name, groupName);
        }
    }

    private int countPoints()
    {
        var sum = 0;

        foreach (var c in currentBuild?.TableCards)
        {
            if (c.Number > currentBuild?.PlayerCard.Number)
            {
                return -1;
            }
            sum += c.Number;
        }
        return sum;
    }

    private void deselectAllCards()
    {
        foreach(var c in PlayerCards)
        {
            c.IsSelected = false;
        }

        foreach(var c in TableCards)
        {
            c.IsSelected = false;
        }
    }

    private void makeMovesDuringTurn(Card card, bool isTableCards)
    {
        if(isTableCards)
        {
            card.IsSelected = !card.IsSelected;
            currentBuild?.UpdateSelectedTableCards(card);
        }
        else
        {
            foreach(var c in PlayerCards)
            {
                c.IsSelected = false;
            }
            card.IsSelected = true;
            currentBuild?.UpdatePlayerCard(card);
        }

        StateHasChanged();
    }

    public void Dismiss()
    {
        showBuild = false;
        deselectAllCards();
        StateHasChanged();
    }
    private void startTurn()
    {
        currentBuild = new CardBuild(player);
    }

    public async Task LogMe(string text)
    {
        await JSRuntime.InvokeVoidAsync("console.log", text);
        StateHasChanged();
    }

    // Find image path to the dealt cards
    private string GetCardPath(string name)
    {
        return "cards/" + name + ".png";
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}

