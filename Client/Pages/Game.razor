@using Casino.Shared.Models;
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

@page "/game"

<h2>Game between @player1 and @player2</h2>

@if (cards != null)

{
    

}

@code {
    [Parameter]
    public string player1 { get; set; }

    [Parameter]
    public string player2 { get; set; }

    public string cards = "";

    private HubConnection? hubConnection { get; set; }

    

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
           .WithUrl(NavigationManager.ToAbsoluteUri($"/gamehub"))       
           .WithAutomaticReconnect()
           .Build();
        hubConnection.Reconnected += connectionId =>
        {
            if (hubConnection.State == HubConnectionState.Disconnected)
            {
                Console.WriteLine("woop");
            }

            return Task.CompletedTask;
        };
        
    }
    
    

    public async Task LogMe(string username, string message)
    {
        await JSRuntime.InvokeVoidAsync("console.log", username + ": " + message);
        StateHasChanged();
    }

        public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
